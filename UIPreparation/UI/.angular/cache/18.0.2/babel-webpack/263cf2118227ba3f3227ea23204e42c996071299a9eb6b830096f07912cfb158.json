{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { AlertifyService } from 'app/core/services/alertify.service';\nimport { LocalStorageService } from 'app/core/services/local-storage.service';\nimport { environment } from 'environments/environment';\nimport { SharedService } from 'app/core/services/shared.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/services/local-storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"app/core/services/alertify.service\";\nimport * as i5 from \"app/core/services/shared.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, storageService, router, alertifyService, sharedService) {\n      this.httpClient = httpClient;\n      this.storageService = storageService;\n      this.router = router;\n      this.alertifyService = alertifyService;\n      this.sharedService = sharedService;\n      this.jwtHelper = new JwtHelperService();\n      this.setClaims();\n    }\n    login(loginUser) {\n      let headers = new HttpHeaders();\n      headers = headers.append(\"Content-Type\", \"application/json\");\n      this.httpClient.post(environment.getApiUrl + \"/Auth/login\", loginUser, {\n        headers: headers\n      }).subscribe(data => {\n        if (data.success) {\n          this.storageService.setToken(data.data.token);\n          this.storageService.setItem(\"refreshToken\", data.data.refreshToken);\n          this.claims = data.data.claims;\n          var decode = this.jwtHelper.decodeToken(this.storageService.getToken());\n          var propUserName = Object.keys(decode).filter(x => x.endsWith(\"/name\"))[0];\n          this.userName = decode[propUserName];\n          this.sharedService.sendChangeUserNameEvent();\n          this.router.navigateByUrl(\"/dashboard\");\n        } else {\n          this.alertifyService.warning(data.message);\n        }\n      });\n    }\n    getUserName() {\n      return this.userName;\n    }\n    setClaims() {\n      if ((this.claims == undefined || this.claims.length == 0) && this.storageService.getToken() != null && this.loggedIn()) {\n        this.httpClient.get(environment.getApiUrl + \"/operation-claims/cache\").subscribe(data => {\n          this.claims = data;\n        });\n        var token = this.storageService.getToken();\n        var decode = this.jwtHelper.decodeToken(token);\n        var propUserName = Object.keys(decode).filter(x => x.endsWith(\"/name\"))[0];\n        this.userName = decode[propUserName];\n      }\n    }\n    logOut() {\n      this.storageService.removeToken();\n      this.storageService.removeItem(\"lang\");\n      this.storageService.removeItem(\"refreshToken\");\n      this.claims = [];\n    }\n    loggedIn() {\n      let isExpired = this.jwtHelper.isTokenExpired(this.storageService.getToken(), -120);\n      return !isExpired;\n    }\n    getCurrentUserId() {\n      this.jwtHelper.decodeToken(this.storageService.getToken()).userId;\n    }\n    claimGuard(claim) {\n      if (!this.loggedIn()) this.router.navigate([\"/login\"]);\n      var check = this.claims.some(function (item) {\n        return item == claim;\n      });\n      return check;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AlertifyService), i0.ɵɵinject(i5.SharedService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}