{"ast":null,"code":"import { HttpEntityRepositoryService } from 'app/core/services/http-entity-repository.service';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/services/http-entity-repository.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let LanguageService = /*#__PURE__*/(() => {\n  class LanguageService {\n    constructor(service, _httpClient) {\n      this.service = service;\n      this._httpClient = _httpClient;\n    }\n    getLanguageList() {\n      return this._httpClient.get(environment.getApiUrl + '/languages/');\n    }\n    getLanguage(id) {\n      return this._httpClient.get(environment.getApiUrl + `/languages/${id}`);\n    }\n    addLanguage(language) {\n      return this._httpClient.post(environment.getApiUrl + \"/languages/\", language, {\n        responseType: 'text'\n      });\n    }\n    updateLanguage(language) {\n      return this._httpClient.put(environment.getApiUrl + \"/languages/\", language, {\n        responseType: 'text'\n      });\n    }\n    deleteLanguage(id) {\n      return this._httpClient.delete(environment.getApiUrl + `/languages/${id}`);\n    }\n    static #_ = this.ɵfac = function LanguageService_Factory(t) {\n      return new (t || LanguageService)(i0.ɵɵinject(i1.HttpEntityRepositoryService), i0.ɵɵinject(i2.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LanguageService,\n      factory: LanguageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LanguageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}