{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Directive, Output, HostListener, forwardRef, Component, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = a0 => ({\n  \"dropdown-multiselect--active\": a0\n});\nfunction MultiSelectComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0._placeholder);\n  }\n}\nfunction MultiSelectComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 15)(1, \"span\", 16)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function MultiSelectComponent_span_4_Template_a_click_4_listener($event) {\n      const item_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onItemClick($event, item_r3));\n    });\n    i0.ɵɵtext(5, \"x\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    const k_r4 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"hidden\", k_r4 > ctx_r0._settings.itemsShowLimit - 1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", item_r3.text, \"\\xA0\");\n  }\n}\nfunction MultiSelectComponent_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"+\", ctx_r0.itemShowRemaining(), \"\");\n  }\n}\nfunction MultiSelectComponent_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 19);\n    i0.ɵɵlistener(\"click\", function MultiSelectComponent_li_10_Template_li_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.toggleSelectAll());\n    });\n    i0.ɵɵelement(1, \"input\", 20);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"checked\", ctx_r0.isAllItemsSelected())(\"disabled\", ctx_r0.disabled || ctx_r0.isLimitSelectionReached());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(!ctx_r0.isAllItemsSelected() ? ctx_r0._settings.selectAllText : ctx_r0._settings.unSelectAllText);\n  }\n}\nfunction MultiSelectComponent_li_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 21)(1, \"input\", 22);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function MultiSelectComponent_li_11_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r0 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r0.filter.text, $event) || (ctx_r0.filter.text = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"ngModelChange\", function MultiSelectComponent_li_11_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onFilterTextChange($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"readOnly\", ctx_r0.disabled)(\"placeholder\", ctx_r0._settings.searchPlaceholderText);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r0.filter.text);\n  }\n}\nfunction MultiSelectComponent_li_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 23);\n    i0.ɵɵlistener(\"click\", function MultiSelectComponent_li_13_Template_li_click_0_listener($event) {\n      const item_r8 = i0.ɵɵrestoreView(_r7).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onItemClick($event, item_r8));\n    });\n    i0.ɵɵelement(1, \"input\", 24);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r8 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"checked\", ctx_r0.isSelected(item_r8))(\"disabled\", ctx_r0.disabled || ctx_r0.isLimitSelectionReached() && !ctx_r0.isSelected(item_r8) || item_r8.isDisabled);\n    i0.ɵɵattribute(\"aria-label\", item_r8.text);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r8.text);\n  }\n}\nfunction MultiSelectComponent_li_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 25)(1, \"h5\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0._settings.noFilteredDataAvailablePlaceholderText);\n  }\n}\nfunction MultiSelectComponent_li_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 26)(1, \"h5\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0._settings.noDataAvailablePlaceholderText);\n  }\n}\nclass ListItem {\n  id;\n  text;\n  isDisabled;\n  constructor(source) {\n    if (typeof source === 'string' || typeof source === 'number') {\n      this.id = this.text = source;\n      this.isDisabled = false;\n    }\n    if (typeof source === 'object') {\n      this.id = source.id;\n      this.text = source.text;\n      this.isDisabled = source.isDisabled;\n    }\n  }\n}\nlet ListFilterPipe = /*#__PURE__*/(() => {\n  class ListFilterPipe {\n    transform(items, filter) {\n      if (!items || !filter) {\n        return items;\n      }\n      return items.filter(item => this.applyFilter(item, filter));\n    }\n    applyFilter(item, filter) {\n      if (typeof item.text === 'string' && typeof filter.text === 'string') {\n        return !(filter.text && item.text && item.text.toLowerCase().indexOf(filter.text.toLowerCase()) === -1);\n      } else {\n        return !(filter.text && item.text && item.text.toString().toLowerCase().indexOf(filter.text.toString().toLowerCase()) === -1);\n      }\n    }\n    static ɵfac = function ListFilterPipe_Factory(t) {\n      return new (t || ListFilterPipe)();\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"multiSelectFilter\",\n      type: ListFilterPipe,\n      pure: false\n    });\n  }\n  return ListFilterPipe;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ClickOutsideDirective = /*#__PURE__*/(() => {\n  class ClickOutsideDirective {\n    _elementRef;\n    constructor(_elementRef) {\n      this._elementRef = _elementRef;\n    }\n    clickOutside = new EventEmitter();\n    onClick(event, targetElement) {\n      if (!targetElement) {\n        return;\n      }\n      const clickedInside = this._elementRef.nativeElement.contains(targetElement);\n      if (!clickedInside) {\n        this.clickOutside.emit(event);\n      }\n    }\n    static ɵfac = function ClickOutsideDirective_Factory(t) {\n      return new (t || ClickOutsideDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ClickOutsideDirective,\n      selectors: [[\"\", \"clickOutside\", \"\"]],\n      hostBindings: function ClickOutsideDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function ClickOutsideDirective_click_HostBindingHandler($event) {\n            return ctx.onClick($event, $event.target);\n          }, false, i0.ɵɵresolveDocument);\n        }\n      },\n      outputs: {\n        clickOutside: \"clickOutside\"\n      }\n    });\n  }\n  return ClickOutsideDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DROPDOWN_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MultiSelectComponent),\n  multi: true\n};\nconst noop = () => {};\nlet MultiSelectComponent = /*#__PURE__*/(() => {\n  class MultiSelectComponent {\n    listFilterPipe;\n    cdr;\n    _settings;\n    _data = [];\n    selectedItems = [];\n    isDropdownOpen = true;\n    _placeholder = \"Select\";\n    _sourceDataType = null; // to keep note of the source data type. could be array of string/number/object\n    _sourceDataFields = []; // store source data fields names\n    filter = new ListItem(this.data);\n    defaultSettings = {\n      singleSelection: false,\n      idField: \"id\",\n      textField: \"text\",\n      disabledField: \"isDisabled\",\n      enableCheckAll: true,\n      selectAllText: \"Select All\",\n      unSelectAllText: \"UnSelect All\",\n      allowSearchFilter: false,\n      limitSelection: -1,\n      clearSearchFilter: true,\n      maxHeight: 197,\n      itemsShowLimit: 999999999999,\n      searchPlaceholderText: \"Search\",\n      noDataAvailablePlaceholderText: \"No data available\",\n      noFilteredDataAvailablePlaceholderText: \"No filtered data available\",\n      closeDropDownOnSelection: false,\n      showSelectedItemsAtTop: false,\n      defaultOpen: false,\n      allowRemoteDataSearch: false\n    };\n    set placeholder(value) {\n      if (value) {\n        this._placeholder = value;\n      } else {\n        this._placeholder = \"Select\";\n      }\n    }\n    disabled = false;\n    set settings(value) {\n      if (value) {\n        this._settings = Object.assign(this.defaultSettings, value);\n      } else {\n        this._settings = Object.assign(this.defaultSettings);\n      }\n    }\n    set data(value) {\n      if (!value) {\n        this._data = [];\n      } else {\n        const firstItem = value[0];\n        this._sourceDataType = typeof firstItem;\n        this._sourceDataFields = this.getFields(firstItem);\n        this._data = value.map(item => typeof item === \"string\" || typeof item === \"number\" ? new ListItem(item) : new ListItem({\n          id: item[this._settings.idField],\n          text: item[this._settings.textField],\n          isDisabled: item[this._settings.disabledField]\n        }));\n      }\n    }\n    onFilterChange = new EventEmitter();\n    onDropDownClose = new EventEmitter();\n    onSelect = new EventEmitter();\n    onDeSelect = new EventEmitter();\n    onSelectAll = new EventEmitter();\n    onDeSelectAll = new EventEmitter();\n    onTouchedCallback = noop;\n    onChangeCallback = noop;\n    onFilterTextChange($event) {\n      this.onFilterChange.emit($event);\n    }\n    constructor(listFilterPipe, cdr) {\n      this.listFilterPipe = listFilterPipe;\n      this.cdr = cdr;\n    }\n    onItemClick($event, item) {\n      if (this.disabled || item.isDisabled) {\n        return false;\n      }\n      const found = this.isSelected(item);\n      const allowAdd = this._settings.limitSelection === -1 || this._settings.limitSelection > 0 && this.selectedItems.length < this._settings.limitSelection;\n      if (!found) {\n        if (allowAdd) {\n          this.addSelected(item);\n        }\n      } else {\n        this.removeSelected(item);\n      }\n      if (this._settings.singleSelection && this._settings.closeDropDownOnSelection) {\n        this.closeDropdown();\n      }\n    }\n    writeValue(value) {\n      if (value !== undefined && value !== null && value.length > 0) {\n        if (this._settings.singleSelection) {\n          try {\n            if (value.length >= 1) {\n              const firstItem = value[0];\n              this.selectedItems = [typeof firstItem === \"string\" || typeof firstItem === \"number\" ? new ListItem(firstItem) : new ListItem({\n                id: firstItem[this._settings.idField],\n                text: firstItem[this._settings.textField],\n                isDisabled: firstItem[this._settings.disabledField]\n              })];\n            }\n          } catch (e) {\n            // console.error(e.body.msg);\n          }\n        } else {\n          const _data = value.map(item => typeof item === \"string\" || typeof item === \"number\" ? new ListItem(item) : new ListItem({\n            id: item[this._settings.idField],\n            text: item[this._settings.textField],\n            isDisabled: item[this._settings.disabledField]\n          }));\n          if (this._settings.limitSelection > 0) {\n            this.selectedItems = _data.splice(0, this._settings.limitSelection);\n          } else {\n            this.selectedItems = _data;\n          }\n        }\n      } else {\n        this.selectedItems = [];\n      }\n      this.onChangeCallback(value);\n      this.cdr.markForCheck();\n    }\n    // From ControlValueAccessor interface\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n    // From ControlValueAccessor interface\n    registerOnTouched(fn) {\n      this.onTouchedCallback = fn;\n    }\n    // Set touched on blur\n    onTouched() {\n      // this.closeDropdown();\n      this.onTouchedCallback();\n    }\n    trackByFn(index, item) {\n      return item.id;\n    }\n    isSelected(clickedItem) {\n      let found = false;\n      this.selectedItems.forEach(item => {\n        if (clickedItem.id === item.id) {\n          found = true;\n        }\n      });\n      return found;\n    }\n    isLimitSelectionReached() {\n      return this._settings.limitSelection === this.selectedItems.length;\n    }\n    isAllItemsSelected() {\n      // get disabld item count\n      let filteredItems = this.listFilterPipe.transform(this._data, this.filter);\n      const itemDisabledCount = filteredItems.filter(item => item.isDisabled).length;\n      // take disabled items into consideration when checking\n      if ((!this.data || this.data.length === 0) && this._settings.allowRemoteDataSearch) {\n        return false;\n      }\n      return filteredItems.length === this.selectedItems.length + itemDisabledCount;\n    }\n    showButton() {\n      if (!this._settings.singleSelection) {\n        if (this._settings.limitSelection > 0) {\n          return false;\n        }\n        // this._settings.enableCheckAll = this._settings.limitSelection === -1 ? true : false;\n        return true; // !this._settings.singleSelection && this._settings.enableCheckAll && this._data.length > 0;\n      } else {\n        // should be disabled in single selection mode\n        return false;\n      }\n    }\n    itemShowRemaining() {\n      return this.selectedItems.length - this._settings.itemsShowLimit;\n    }\n    addSelected(item) {\n      if (this._settings.singleSelection) {\n        this.selectedItems = [];\n        this.selectedItems.push(item);\n      } else {\n        this.selectedItems.push(item);\n      }\n      this.onChangeCallback(this.emittedValue(this.selectedItems));\n      this.onSelect.emit(this.emittedValue(item));\n    }\n    removeSelected(itemSel) {\n      this.selectedItems.forEach(item => {\n        if (itemSel.id === item.id) {\n          this.selectedItems.splice(this.selectedItems.indexOf(item), 1);\n        }\n      });\n      this.onChangeCallback(this.emittedValue(this.selectedItems));\n      this.onDeSelect.emit(this.emittedValue(itemSel));\n    }\n    emittedValue(val) {\n      const selected = [];\n      if (Array.isArray(val)) {\n        val.map(item => {\n          selected.push(this.objectify(item));\n        });\n      } else {\n        if (val) {\n          return this.objectify(val);\n        }\n      }\n      return selected;\n    }\n    objectify(val) {\n      if (this._sourceDataType === 'object') {\n        const obj = {};\n        obj[this._settings.idField] = val.id;\n        obj[this._settings.textField] = val.text;\n        if (this._sourceDataFields.includes(this._settings.disabledField)) {\n          obj[this._settings.disabledField] = val.isDisabled;\n        }\n        return obj;\n      }\n      if (this._sourceDataType === 'number') {\n        return Number(val.id);\n      } else {\n        return val.text;\n      }\n    }\n    toggleDropdown(evt) {\n      evt.preventDefault();\n      if (this.disabled && this._settings.singleSelection) {\n        return;\n      }\n      this._settings.defaultOpen = !this._settings.defaultOpen;\n      if (!this._settings.defaultOpen) {\n        this.onDropDownClose.emit();\n      }\n    }\n    closeDropdown() {\n      this._settings.defaultOpen = false;\n      // clear search text\n      if (this._settings.clearSearchFilter) {\n        this.filter.text = \"\";\n      }\n      this.onDropDownClose.emit();\n    }\n    toggleSelectAll() {\n      if (this.disabled) {\n        return false;\n      }\n      if (!this.isAllItemsSelected()) {\n        // filter out disabled item first before slicing\n        this.selectedItems = this.listFilterPipe.transform(this._data, this.filter).filter(item => !item.isDisabled).slice();\n        this.onSelectAll.emit(this.emittedValue(this.selectedItems));\n      } else {\n        this.selectedItems = [];\n        this.onDeSelectAll.emit(this.emittedValue(this.selectedItems));\n      }\n      this.onChangeCallback(this.emittedValue(this.selectedItems));\n    }\n    getFields(inputData) {\n      const fields = [];\n      if (typeof inputData !== \"object\") {\n        return fields;\n      }\n      // tslint:disable-next-line:forin\n      for (const prop in inputData) {\n        fields.push(prop);\n      }\n      return fields;\n    }\n    static ɵfac = function MultiSelectComponent_Factory(t) {\n      return new (t || MultiSelectComponent)(i0.ɵɵdirectiveInject(ListFilterPipe), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MultiSelectComponent,\n      selectors: [[\"ng-multiselect-dropdown\"]],\n      hostBindings: function MultiSelectComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"blur\", function MultiSelectComponent_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          });\n        }\n      },\n      inputs: {\n        placeholder: \"placeholder\",\n        disabled: \"disabled\",\n        settings: \"settings\",\n        data: \"data\"\n      },\n      outputs: {\n        onFilterChange: \"onFilterChange\",\n        onDropDownClose: \"onDropDownClose\",\n        onSelect: \"onSelect\",\n        onDeSelect: \"onDeSelect\",\n        onSelectAll: \"onSelectAll\",\n        onDeSelectAll: \"onDeSelectAll\"\n      },\n      features: [i0.ɵɵProvidersFeature([DROPDOWN_CONTROL_VALUE_ACCESSOR])],\n      decls: 18,\n      vars: 23,\n      consts: [[\"tabindex\", \"0\", 1, \"multiselect-dropdown\", 3, \"blur\", \"clickOutside\"], [\"tabindex\", \"-1\", 1, \"dropdown-btn\", 3, \"click\"], [4, \"ngIf\"], [\"class\", \"selected-item-container\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [2, \"float\", \"right !important\", \"padding-right\", \"4px\", 3, \"ngClass\"], [\"style\", \"padding-right: 15px;\", 4, \"ngIf\"], [1, \"dropdown-multiselect__caret\"], [1, \"dropdown-list\", 3, \"hidden\"], [1, \"item1\"], [\"class\", \"multiselect-item-checkbox\", \"style\", \"border-bottom: 1px solid #ccc;padding:10px\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"filter-textbox\", 4, \"ngIf\"], [1, \"item2\"], [\"class\", \"multiselect-item-checkbox\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"no-filtered-data\", 4, \"ngIf\"], [\"class\", \"no-data\", 4, \"ngIf\"], [1, \"selected-item-container\"], [1, \"selected-item\", 3, \"hidden\"], [2, \"padding-left\", \"2px\", \"color\", \"white\", 3, \"click\"], [2, \"padding-right\", \"15px\"], [1, \"multiselect-item-checkbox\", 2, \"border-bottom\", \"1px solid #ccc\", \"padding\", \"10px\", 3, \"click\"], [\"type\", \"checkbox\", \"aria-label\", \"multiselect-select-all\", 3, \"checked\", \"disabled\"], [1, \"filter-textbox\"], [\"type\", \"text\", \"aria-label\", \"multiselect-search\", 3, \"ngModelChange\", \"readOnly\", \"placeholder\", \"ngModel\"], [1, \"multiselect-item-checkbox\", 3, \"click\"], [\"type\", \"checkbox\", 3, \"checked\", \"disabled\"], [1, \"no-filtered-data\"], [1, \"no-data\"]],\n      template: function MultiSelectComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"blur\", function MultiSelectComponent_Template_div_blur_0_listener() {\n            return ctx.onTouched();\n          })(\"clickOutside\", function MultiSelectComponent_Template_div_clickOutside_0_listener() {\n            return ctx.closeDropdown();\n          });\n          i0.ɵɵelementStart(1, \"div\")(2, \"span\", 1);\n          i0.ɵɵlistener(\"click\", function MultiSelectComponent_Template_span_click_2_listener($event) {\n            return ctx.toggleDropdown($event);\n          });\n          i0.ɵɵtemplate(3, MultiSelectComponent_span_3_Template, 2, 1, \"span\", 2)(4, MultiSelectComponent_span_4_Template, 6, 2, \"span\", 3);\n          i0.ɵɵelementStart(5, \"span\", 4);\n          i0.ɵɵtemplate(6, MultiSelectComponent_span_6_Template, 2, 1, \"span\", 5);\n          i0.ɵɵelement(7, \"span\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"div\", 7)(9, \"ul\", 8);\n          i0.ɵɵtemplate(10, MultiSelectComponent_li_10_Template, 4, 3, \"li\", 9)(11, MultiSelectComponent_li_11_Template, 2, 3, \"li\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"ul\", 11);\n          i0.ɵɵtemplate(13, MultiSelectComponent_li_13_Template, 4, 4, \"li\", 12);\n          i0.ɵɵpipe(14, \"multiSelectFilter\");\n          i0.ɵɵtemplate(15, MultiSelectComponent_li_15_Template, 3, 1, \"li\", 13);\n          i0.ɵɵpipe(16, \"multiSelectFilter\");\n          i0.ɵɵtemplate(17, MultiSelectComponent_li_17_Template, 3, 1, \"li\", 14);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"disabled\", ctx.disabled);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedItems.length == 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", ctx.selectedItems)(\"ngForTrackBy\", ctx.trackByFn);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(21, _c0, ctx._settings.defaultOpen));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.itemShowRemaining() > 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"hidden\", !ctx._settings.defaultOpen);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", (ctx._data.length > 0 || ctx._settings.allowRemoteDataSearch) && !ctx._settings.singleSelection && ctx._settings.enableCheckAll && ctx._settings.limitSelection === -1);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (ctx._data.length > 0 || ctx._settings.allowRemoteDataSearch) && ctx._settings.allowSearchFilter);\n          i0.ɵɵadvance();\n          i0.ɵɵstyleProp(\"max-height\", ctx._settings.maxHeight + \"px\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(14, 15, ctx._data, ctx.filter));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx._data.length != 0 && i0.ɵɵpipeBind2(16, 18, ctx._data, ctx.filter).length == 0 && !ctx._settings.allowRemoteDataSearch);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx._data.length == 0 && !ctx._settings.allowRemoteDataSearch);\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, ClickOutsideDirective, ListFilterPipe],\n      styles: [\".multiselect-dropdown[_ngcontent-%COMP%]{position:relative;width:100%;font-size:inherit;font-family:inherit}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]{display:inline-block;border:1px solid #adadad;width:100%;padding:6px 12px;margin-bottom:0;font-weight:400;line-height:1.52857143;text-align:left;vertical-align:middle;cursor:pointer;background-image:none;border-radius:4px}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]   .selected-item-container[_ngcontent-%COMP%]{display:flex;float:left}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]   .selected-item-container[_ngcontent-%COMP%]   .selected-item[_ngcontent-%COMP%]{border:1px solid #337ab7;margin-right:4px;background:#337ab7;padding:0 5px;color:#fff;border-radius:2px;float:left;max-width:100px}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]   .selected-item-container[_ngcontent-%COMP%]   .selected-item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]   .selected-item-container[_ngcontent-%COMP%]   .selected-item[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]   .selected-item[_ngcontent-%COMP%]:hover{box-shadow:1px 1px #959595}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]   .dropdown-multiselect__caret[_ngcontent-%COMP%]{line-height:16px;display:block;position:absolute;box-sizing:border-box;width:40px;height:38px;right:1px;top:0;padding:4px 8px;margin:0;text-decoration:none;text-align:center;cursor:pointer;transition:transform .2s ease}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]   .dropdown-multiselect__caret[_ngcontent-%COMP%]:before{position:relative;right:0;top:65%;color:#999;margin-top:4px;border-style:solid;border-width:8px 8px 0 8px;border-color:#999999 transparent;content:\\\"\\\"}.multiselect-dropdown[_ngcontent-%COMP%]   .dropdown-btn[_ngcontent-%COMP%]   .dropdown-multiselect--active[_ngcontent-%COMP%]   .dropdown-multiselect__caret[_ngcontent-%COMP%]{transform:rotate(180deg)}.multiselect-dropdown[_ngcontent-%COMP%]   .disabled[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{background-color:#eceeef}.dropdown-list[_ngcontent-%COMP%]{position:absolute;padding-top:6px;width:100%;z-index:9999;border:1px solid #ccc;border-radius:3px;background:#fff;margin-top:10px;box-shadow:0 1px 5px #959595}.dropdown-list[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{padding:0;list-style:none;overflow:auto;margin:0}.dropdown-list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{padding:6px 10px;cursor:pointer;text-align:left}.dropdown-list[_ngcontent-%COMP%]   .filter-textbox[_ngcontent-%COMP%]{border-bottom:1px solid #ccc;position:relative;padding:10px}.dropdown-list[_ngcontent-%COMP%]   .filter-textbox[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:0px;width:100%;padding:0 0 0 26px}.dropdown-list[_ngcontent-%COMP%]   .filter-textbox[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{outline:none}.multiselect-item-checkbox[_ngcontent-%COMP%]:hover{background-color:#e4e3e3}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:focus + div[_ngcontent-%COMP%]:before, .multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:hover + div[_ngcontent-%COMP%]:before{border-color:#337ab7;background-color:#f2f2f2}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:active + div[_ngcontent-%COMP%]:before{transition-duration:0s}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%] + div[_ngcontent-%COMP%]{position:relative;padding-left:2em;vertical-align:middle;-webkit-user-select:none;user-select:none;cursor:pointer;margin:0;color:#000}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%] + div[_ngcontent-%COMP%]:before{box-sizing:content-box;content:\\\"\\\";color:#337ab7;position:absolute;top:50%;left:0;width:14px;height:14px;margin-top:-9px;border:2px solid #337ab7;text-align:center;transition:all .4s ease}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%] + div[_ngcontent-%COMP%]:after{box-sizing:content-box;content:\\\"\\\";background-color:#337ab7;position:absolute;top:50%;left:4px;width:10px;height:10px;margin-top:-5px;transform:scale(0);transform-origin:50%;transition:transform .2s ease-out}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:disabled + div[_ngcontent-%COMP%]:before{border-color:#ccc}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:disabled:focus + div[_ngcontent-%COMP%]:before   .multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:disabled:hover + div[_ngcontent-%COMP%]:before{background-color:inherit}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:disabled:checked + div[_ngcontent-%COMP%]:before{background-color:#ccc}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%] + div[_ngcontent-%COMP%]:after{background-color:transparent;top:50%;left:4px;width:8px;height:3px;margin-top:-4px;border-style:solid;border-color:#fff;border-width:0 0 3px 3px;border-image:none;transform:rotate(-45deg) scale(0)}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked + div[_ngcontent-%COMP%]:after{content:\\\"\\\";transform:rotate(-45deg) scale(1);transition:transform .2s ease-out}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked + div[_ngcontent-%COMP%]:before{animation:_ngcontent-%COMP%_borderscale .2s ease-in;background:#337ab7}.multiselect-item-checkbox[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked + div[_ngcontent-%COMP%]:after{transform:rotate(-45deg) scale(1)}@keyframes _ngcontent-%COMP%_borderscale{50%{box-shadow:0 0 0 2px #337ab7}}\"],\n      changeDetection: 0\n    });\n  }\n  return MultiSelectComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgMultiSelectDropDownModule = /*#__PURE__*/(() => {\n  class NgMultiSelectDropDownModule {\n    static forRoot() {\n      return {\n        ngModule: NgMultiSelectDropDownModule\n      };\n    }\n    static ɵfac = function NgMultiSelectDropDownModule_Factory(t) {\n      return new (t || NgMultiSelectDropDownModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgMultiSelectDropDownModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [ListFilterPipe],\n      imports: [CommonModule, FormsModule]\n    });\n  }\n  return NgMultiSelectDropDownModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MultiSelectComponent, NgMultiSelectDropDownModule };\n//# sourceMappingURL=ng-multiselect-dropdown.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}