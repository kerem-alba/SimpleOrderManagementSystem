{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { Component, Inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { StockService } from '../../services/stock.service';\nimport { AlertifyService } from 'app/core/services/alertify.service';\nimport { CustomerService } from '../../../customer/services/customer.service';\nimport { ProductService } from '../../../product/services/product.service';\nlet StockAddDialogComponent = class StockAddDialogComponent {\n  constructor(fb, stockService, customerService, productService, alertify, dialogRef, data) {\n    this.fb = fb;\n    this.stockService = stockService;\n    this.customerService = customerService;\n    this.productService = productService;\n    this.alertify = alertify;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.customers = [];\n    this.products = [];\n  }\n  ngOnInit() {\n    this.createStockAddForm();\n    this.loadCustomers();\n    this.loadProducts();\n  }\n  createStockAddForm() {\n    this.stockAddForm = this.fb.group({\n      customerId: ['', Validators.required],\n      selectedProducts: [[]],\n      products: this.fb.array([])\n    });\n  }\n  get selectedProductsControls() {\n    return this.stockAddForm.get('products');\n  }\n  onProductSelectionChange(event) {\n    const selectedProductIds = event.value;\n    const productControls = this.selectedProductsControls;\n    // Clear current controls\n    while (productControls.length) {\n      productControls.removeAt(0);\n    }\n    // Add a form group for each selected product\n    selectedProductIds.forEach(productId => {\n      productControls.push(this.fb.group({\n        productId: [productId],\n        quantity: [1, Validators.required]\n      }));\n    });\n  }\n  getProductName(productId) {\n    const product = this.products.find(p => p.id === productId);\n    return product ? product.name : '';\n  }\n  loadCustomers() {\n    this.customerService.getCustomerList().subscribe(customers => {\n      this.customers = customers;\n    });\n  }\n  loadProducts() {\n    this.productService.getProductList().subscribe(products => {\n      this.products = products;\n    });\n  }\n  save() {\n    if (this.stockAddForm.valid) {\n      const stockData = this.stockAddForm.value;\n      // Process the stockData before sending to the backend\n      // For example, you might want to transform the data structure\n      this.stockService.addStock(stockData).subscribe(response => {\n        this.alertify.success('Stock created successfully');\n        this.dialogRef.close();\n      }, error => {\n        this.alertify.error('Error creating stock');\n      });\n    }\n  }\n  onNoClick() {\n    this.dialogRef.close();\n  }\n};\nStockAddDialogComponent = __decorate([Component({\n  selector: 'app-stock-add-dialog',\n  templateUrl: './stock-add-dialog.component.html',\n  styleUrls: ['./stock-add-dialog.component.css']\n}), __param(6, Inject(MAT_DIALOG_DATA)), __metadata(\"design:paramtypes\", [FormBuilder, StockService, CustomerService, ProductService, AlertifyService, MatDialogRef, Object])], StockAddDialogComponent);\nexport { StockAddDialogComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}