{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"../../../../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GroupService = /*#__PURE__*/(() => {\n  class GroupService {\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n    }\n    getGroupList() {\n      return this._httpClient.get(environment.getApiUrl + \"/groups/\");\n    }\n    getGroupById(id) {\n      return this._httpClient.get(environment.getApiUrl + `/groups/${id}`);\n    }\n    getGroupClaims(id) {\n      return this._httpClient.get(environment.getApiUrl + `/group-claims/groups/${id}`);\n    }\n    getGroupUsers(id) {\n      return this._httpClient.get(environment.getApiUrl + `/user-groups/groups/${id}/users`);\n    }\n    addGroup(group) {\n      var result = this._httpClient.post(environment.getApiUrl + \"/groups/\", group, {\n        responseType: \"text\"\n      });\n      return result;\n    }\n    updateGroup(group) {\n      var result = this._httpClient.put(environment.getApiUrl + \"/groups/\", group, {\n        responseType: \"text\"\n      });\n      return result;\n    }\n    deleteGroup(id) {\n      return this._httpClient.request(\"delete\", environment.getApiUrl + `/groups/${id}`);\n    }\n    saveGroupClaims(groupId, claims) {\n      var result = this._httpClient.put(environment.getApiUrl + `/group-claims/`, {\n        GroupId: groupId,\n        ClaimIds: claims\n      }, {\n        responseType: \"text\"\n      });\n      return result;\n    }\n    saveGroupUsers(groupId, userIds) {\n      var result = this._httpClient.put(environment.getApiUrl + \"/user-groups/groups/\", {\n        GroupId: groupId,\n        UserIds: userIds\n      }, {\n        responseType: \"text\"\n      });\n      return result;\n    }\n    static #_ = this.ɵfac = function GroupService_Factory(t) {\n      return new (t || GroupService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GroupService,\n      factory: GroupService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return GroupService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}