{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { AppRoutingModule } from './app.routing';\nimport { AppComponent } from './app.component';\nimport { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { ComponentsModule } from './core/modules/components.module';\nimport { AdminLayoutComponent } from './core/components/app/layouts/admin-layout/admin-layout.component';\nimport { TranslationService } from './core/services/Translation.service';\nimport { SweetAlert2Module } from '@sweetalert2/ngx-sweetalert2';\nimport { LoginGuard } from './core/guards/login-guard';\nimport { AuthInterceptorService } from './core/interceptors/auth-interceptor.service';\nimport { HttpEntityRepositoryService } from './core/services/http-entity-repository.service';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ProductAddDialogComponent } from './core/components/app/product/dialog/product-add-dialog/product-add-dialog.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ProductUpdateDialogComponent } from './core/components/app/product/dialog/product-update-dialog/product-update-dialog.component';\nimport { CustomerAddDialogComponent } from './core/components/app/customer/dialog/customer-add-dialog/customer-add-dialog/customer-add-dialog.component';\nimport { CustomerUpdateDialogComponent } from './core/components/app/customer/dialog/customer-update-dialog/customer-update-dialog/customer-update-dialog.component';\nimport { OrderAddDialogComponent } from './core/components/app/order/dialog/order-add-dialog/order-add-dialog.component';\nimport { StockAddDialogComponent } from './core/components/app/stock/dialog/order-add-dialog/stock-add-dialog.component';\n// i18 kullanıclak ise aşağıdaki metod aktif edilecek\n//  export function HttpLoaderFactory(http: HttpClient) {\n//    \n//    var asd=new TranslateHttpLoader(http, '../../../../assets/i18n/', '.json'); \n//    return asd;\n//  }\nexport function tokenGetter() {\n  return localStorage.getItem(\"token\");\n}\nlet AppModule = class AppModule {};\nAppModule = __decorate([NgModule({\n  imports: [BrowserAnimationsModule, FormsModule, ReactiveFormsModule, HttpClientModule, ComponentsModule, RouterModule, MatDialogModule, AppRoutingModule, MatIconButton, MatIconModule, NgMultiSelectDropDownModule.forRoot(), SweetAlert2Module.forRoot(), NgbModule, TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      //useFactory:HttpLoaderFactory, //i18 kullanılacak ise useClass kapatılıp yukarıda bulunan HttpLoaderFactory ve bu satır aktif edilecek\n      useClass: TranslationService,\n      deps: [HttpClient]\n    }\n  }), MatSelectModule, MatFormFieldModule, BrowserAnimationsModule, MatInputModule],\n  declarations: [AppComponent, AdminLayoutComponent, ProductAddDialogComponent, ProductUpdateDialogComponent, CustomerAddDialogComponent, CustomerUpdateDialogComponent, OrderAddDialogComponent, StockAddDialogComponent],\n  providers: [LoginGuard, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthInterceptorService,\n    multi: true\n  }, HttpEntityRepositoryService],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})], AppModule);\nexport { AppModule };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}