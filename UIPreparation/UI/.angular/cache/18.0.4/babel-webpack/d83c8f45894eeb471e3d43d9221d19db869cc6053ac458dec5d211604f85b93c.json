{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Size } from '../../models/size.enum';\nimport { ProductService } from '../../services/product.service';\nimport { AlertifyService } from 'app/core/services/alertify.service';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/product.service\";\nimport * as i3 from \"app/core/services/alertify.service\";\nimport * as i4 from \"@angular/material/dialog\";\nexport let ProductAddDialogComponent = /*#__PURE__*/(() => {\n  class ProductAddDialogComponent {\n    constructor(formBuilder, productService, alertifyService, dialogRef) {\n      this.formBuilder = formBuilder;\n      this.productService = productService;\n      this.alertifyService = alertifyService;\n      this.dialogRef = dialogRef;\n      this.sizeOptions = [{\n        label: 'Small',\n        value: Size.S\n      }, {\n        label: 'Medium',\n        value: Size.M\n      }, {\n        label: 'Large',\n        value: Size.L\n      }, {\n        label: 'Extra Large',\n        value: Size.XL\n      }];\n    }\n    ngOnInit() {\n      this.createProductAddForm();\n    }\n    createProductAddForm() {\n      this.productAddForm = this.formBuilder.group({\n        id: [0],\n        name: [\"\", Validators.required],\n        size: [null, Validators.required],\n        colorId: [\"\", Validators.required],\n        status: [true]\n      });\n    }\n    save() {\n      if (this.productAddForm.valid) {\n        console.log('Form submitted', this.productAddForm.value);\n        const product = Object.assign({}, this.productAddForm.value);\n        this.productService.addProduct(product).subscribe(data => {\n          this.alertifyService.success(data);\n          this.dialogRef.close(true); // Dialog'u kapat ve başarılı sonucu bildir\n        }, error => {\n          console.error('Error adding product:', error);\n        });\n      } else {\n        console.log('Form is invalid');\n        console.log(this.productAddForm.controls); // Kontrol edilecek alanlar\n        for (const control in this.productAddForm.controls) {\n          if (this.productAddForm.controls[control].errors) {\n            console.log(`Error in ${control}:`, this.productAddForm.controls[control].errors);\n          }\n        }\n      }\n    }\n    onNoClick() {\n      this.dialogRef.close(); // Dialog'u kapat\n    }\n    static #_ = this.ɵfac = function ProductAddDialogComponent_Factory(t) {\n      return new (t || ProductAddDialogComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ProductService), i0.ɵɵdirectiveInject(i3.AlertifyService), i0.ɵɵdirectiveInject(i4.MatDialogRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProductAddDialogComponent,\n      selectors: [[\"product-add-dialog\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 2,\n      vars: 0,\n      template: function ProductAddDialogComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \" product-add-dialog works!\\n\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      dependencies: [MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule, MatIconModule]\n    });\n  }\n  return ProductAddDialogComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}