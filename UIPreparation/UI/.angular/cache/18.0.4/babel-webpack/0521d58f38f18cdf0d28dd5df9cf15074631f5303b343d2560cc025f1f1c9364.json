{"ast":null,"code":"import { FormBuilder, FormsModule, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { Stock } from \"./model/Stock\";\nimport { StockService } from \"./services/stock.service\";\nimport { NgMultiSelectDropDownModule } from \"ng-multiselect-dropdown\";\nimport { AlertifyService } from \"app/core/services/alertify.service\";\nimport { LookUpService } from \"app/core/services/LookUp.service\";\nimport { environment } from \"environments/environment\";\nimport { MatSort, MatSortModule } from \"@angular/material/sort\";\nimport { MatPaginator, MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatTableDataSource, MatTableModule } from \"@angular/material/table\";\nimport { AuthService } from \"app/core/components/admin/login/services/auth.service\";\nimport { SweetAlert2Module } from \"@sweetalert2/ngx-sweetalert2\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRippleModule } from \"@angular/material/core\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { StockAddDialogComponent } from \"./dialog/order-add-dialog/stock-add-dialog.component\";\nimport { MatDialog, MatDialogModule } from \"@angular/material/dialog\";\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from \"@angular/material/icon\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/stock.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"app/core/services/alertify.service\";\nimport * as i4 from \"app/core/services/LookUp.service\";\nimport * as i5 from \"app/core/components/admin/login/services/auth.service\";\nimport * as i6 from \"@angular/material/dialog\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/core\";\nfunction StockComponent_form_3_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const customer_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", customer_r3.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", customer_r3.name, \" \");\n  }\n}\nfunction StockComponent_form_3_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const product_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", product_r4.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", product_r4.name, \" \");\n  }\n}\nfunction StockComponent_form_3_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 5)(2, \"div\", 16)(3, \"mat-form-field\", 7)(4, \"mat-label\");\n    i0.ɵɵtext(5, \"Product\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 16)(8, \"mat-form-field\", 7)(9, \"mat-label\");\n    i0.ɵɵtext(10, \"Quantity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"input\", 18);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const productCtrl_r5 = ctx.$implicit;\n    const i_r6 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r6);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"value\", ctx_r1.getProductName(productCtrl_r5.get(\"productId\").value));\n  }\n}\nfunction StockComponent_form_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 4);\n    i0.ɵɵlistener(\"ngSubmit\", function StockComponent_form_3_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.save());\n    });\n    i0.ɵɵelementStart(1, \"div\", 5)(2, \"div\", 6)(3, \"mat-form-field\", 7)(4, \"mat-label\");\n    i0.ɵɵtext(5, \"Customer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-select\", 8);\n    i0.ɵɵtemplate(7, StockComponent_form_3_mat_option_7_Template, 2, 2, \"mat-option\", 9);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(8, \"div\", 5)(9, \"div\", 6)(10, \"mat-form-field\", 7)(11, \"mat-label\");\n    i0.ɵɵtext(12, \"Products\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-select\", 10);\n    i0.ɵɵlistener(\"selectionChange\", function StockComponent_form_3_Template_mat_select_selectionChange_13_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onProductSelectionChange($event));\n    });\n    i0.ɵɵtemplate(14, StockComponent_form_3_mat_option_14_Template, 2, 2, \"mat-option\", 9);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵtemplate(15, StockComponent_form_3_div_15_Template, 12, 2, \"div\", 11);\n    i0.ɵɵelementStart(16, \"button\", 12);\n    i0.ɵɵtext(17, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(18, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.stockAddForm);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.customers);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.products);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.selectedProductsControls.controls);\n  }\n}\nexport let StockComponent = /*#__PURE__*/(() => {\n  class StockComponent {\n    constructor(stockService, formBuilder, alertifyService, lookUpService, authService, dialog) {\n      this.stockService = stockService;\n      this.formBuilder = formBuilder;\n      this.alertifyService = alertifyService;\n      this.lookUpService = lookUpService;\n      this.authService = authService;\n      this.dialog = dialog;\n      this.displayedColumns = [\"stockId\", \"productName\", \"quantity\", \"status\", \"approve\"];\n      this.stock = new Stock();\n      this.stockList = [];\n      this.isGroupChange = false;\n      this.isClaimChange = false;\n      this.Filter = \"\";\n    }\n    StockAddDialog() {\n      const dialogRef = this.dialog.open(StockAddDialogComponent, {\n        width: '500px'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        this.getStockList(); // Listesi güncelle\n      });\n    }\n    ngAfterViewInit() {\n      this.getStockList();\n    }\n    ngOnInit() {\n      this.createStockAddForm();\n      this.dropdownSettings = environment.getDropDownSetting;\n      this.lookUpService.getGroupLookUp().subscribe(data => {\n        this.groupDropdownList = data;\n      });\n      this.lookUpService.getOperationClaimLookUp().subscribe(data => {\n        this.claimDropdownList = data;\n      });\n    }\n    createStockAddForm() {\n      this.stockAddForm = this.formBuilder.group({\n        id: [0],\n        customerId: [\"\", Validators.required],\n        productId: [\"\", Validators.required],\n        quantity: [\"\", Validators.required],\n        status: [true]\n      });\n    }\n    getStockList() {\n      this.stockService.getStockList().subscribe(data => {\n        this.stockList = data;\n        this.dataSource = new MatTableDataSource(data);\n        this.configDataTable();\n        // Verinin doğru formatta olduğundan emin olun\n        this.dataSource.data.forEach(stock => {\n          console.log(\"Stock:\", stock); // Kullanıcı verilerini kontrol etmek için\n        });\n      }, error => {\n        console.error(\"Error fetching stock list:\", error);\n      });\n    }\n    clearFormGroup(group) {\n      group.markAsUntouched();\n      group.reset();\n      Object.keys(group.controls).forEach(key => {\n        group.get(key).setErrors(null);\n        if (key === \"id\") group.get(key).setValue(0);else if (key === \"status\") group.get(key).setValue(true);\n      });\n      console.log(group.controls); // Form kontrollerinin sıfırlanmış hallerini kontrol etmek için\n    }\n    setStockId(id) {\n      this.id = id;\n    }\n    save() {\n      if (this.stockAddForm.valid) {\n        console.log('Form submitted', this.stockAddForm.value);\n        this.stock = Object.assign({}, this.stockAddForm.value);\n        if (this.stock.id == 0) this.addStock();else this.updateStock();\n      } else {\n        console.log('Form is invalid');\n        console.log(this.stockAddForm.controls); // Kontrol edilecek alanlar\n        for (const control in this.stockAddForm.controls) {\n          if (this.stockAddForm.controls[control].errors) {\n            console.log(`Error in ${control}:`, this.stockAddForm.controls[control].errors);\n          }\n        }\n      }\n    }\n    addStock() {\n      this.stockService.addStock(this.stock).subscribe(data => {\n        this.getStockList();\n        this.stock = new Stock();\n        this.alertifyService.success(data);\n        this.clearFormGroup(this.stockAddForm);\n      }, error => {\n        console.error('Error adding stock:', error);\n      });\n    }\n    getStockById(id) {\n      this.clearFormGroup(this.stockAddForm);\n      this.stockService.getStockById(id).subscribe(data => {\n        this.stock = data;\n        this.stockAddForm.patchValue(data);\n      });\n    }\n    updateStock() {\n      this.stockService.updateStock(this.stock).subscribe(data => {\n        var index = this.stockList.findIndex(x => x.id == this.stock.id);\n        this.stockList[index] = this.stock;\n        this.dataSource = new MatTableDataSource(this.stockList);\n        this.configDataTable();\n        this.stock = new Stock();\n        this.alertifyService.success(data);\n        this.clearFormGroup(this.stockAddForm);\n      });\n    }\n    makeReadyForSale(orderId) {\n      this.stockService.makeReadyForSale(orderId).subscribe(data => {\n        this.getStockList();\n        this.alertifyService.success(data);\n      });\n    }\n    checkClaim(claim) {\n      return this.authService.claimGuard(claim);\n    }\n    configDataTable() {\n      if (this.dataSource) {\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n      }\n    }\n    applyFilter(event) {\n      const filterValue = event.target.value;\n      this.dataSource.filter = filterValue.trim().toLowerCase();\n      if (this.dataSource.paginator) {\n        this.dataSource.paginator.firstPage();\n      }\n    }\n    static #_ = this.ɵfac = function StockComponent_Factory(t) {\n      return new (t || StockComponent)(i0.ɵɵdirectiveInject(i1.StockService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.AlertifyService), i0.ɵɵdirectiveInject(i4.LookUpService), i0.ɵɵdirectiveInject(i5.AuthService), i0.ɵɵdirectiveInject(i6.MatDialog));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: StockComponent,\n      selectors: [[\"stock\"]],\n      viewQuery: function StockComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatPaginator, 5);\n          i0.ɵɵviewQuery(MatSort, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([SweetAlert2Module.forRoot().providers]), i0.ɵɵStandaloneFeature],\n      decls: 6,\n      vars: 1,\n      consts: [[1, \"margin-top\"], [1, \"separator\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Close\", 3, \"click\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"example-full-width\"], [\"formControlName\", \"customerId\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"selectedProducts\", \"multiple\", \"\", 3, \"selectionChange\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 1, \"btn\", \"btn-danger\", \"pull-right\"], [1, \"clearfix\"], [3, \"value\"], [3, \"formGroupName\"], [1, \"col-md-6\"], [\"matInput\", \"\", \"type\", \"text\", \"disabled\", \"\", 3, \"value\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"quantity\"]],\n      template: function StockComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h4\", 0);\n          i0.ɵɵtext(1, \"Stock Add Form\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(2, \"div\", 1);\n          i0.ɵɵtemplate(3, StockComponent_form_3_Template, 19, 4, \"form\", 2);\n          i0.ɵɵelementStart(4, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function StockComponent_Template_button_click_4_listener() {\n            return ctx.onNoClick();\n          });\n          i0.ɵɵtext(5, \" close\\n\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.stockAddForm);\n        }\n      },\n      dependencies: [CommonModule, i7.NgForOf, i7.NgIf, FormsModule, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, ReactiveFormsModule, i2.FormGroupDirective, i2.FormControlName, i2.FormGroupName, MatFormFieldModule, i8.MatFormField, i8.MatLabel, MatInputModule, i9.MatInput, MatButtonModule, i10.MatButton, i10.MatIconButton, MatPaginatorModule, MatSortModule, MatTableModule, MatCheckboxModule, NgMultiSelectDropDownModule, SweetAlert2Module, MatRippleModule, MatSelectModule, i11.MatSelect, i12.MatOption, MatTooltipModule, TranslateModule, MatDialogModule, MatGridListModule, MatCardModule, MatChipsModule, MatDividerModule, MatIconModule]\n    });\n  }\n  return StockComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}