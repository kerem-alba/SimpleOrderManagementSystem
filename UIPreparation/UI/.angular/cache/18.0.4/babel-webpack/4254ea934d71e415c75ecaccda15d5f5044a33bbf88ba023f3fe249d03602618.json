{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewChild } from \"@angular/core\";\nimport { FormBuilder, FormsModule, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { Order } from \"./model/Stock\";\nimport { OrderService } from \"./services/stock.service\";\nimport { NgMultiSelectDropDownModule } from \"ng-multiselect-dropdown\";\nimport { AlertifyService } from \"app/core/services/alertify.service\";\nimport { LookUpService } from \"app/core/services/LookUp.service\";\nimport { environment } from \"environments/environment\";\nimport { MatSort, MatSortModule } from \"@angular/material/sort\";\nimport { MatPaginator, MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatTableDataSource, MatTableModule } from \"@angular/material/table\";\nimport { AuthService } from \"app/core/components/admin/login/services/auth.service\";\nimport { SweetAlert2Module } from \"@sweetalert2/ngx-sweetalert2\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatButtonModule, MatIconButton } from \"@angular/material/button\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRippleModule } from \"@angular/material/core\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { OrderAddDialogComponent } from \"./dialog/order-add-dialog/order-add-dialog.component\";\nimport { MatDialog, MatDialogModule } from \"@angular/material/dialog\";\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from \"@angular/material/icon\";\nlet OrderComponent = class OrderComponent {\n  constructor(orderService, formBuilder, alertifyService, lookUpService, authService, dialog) {\n    this.orderService = orderService;\n    this.formBuilder = formBuilder;\n    this.alertifyService = alertifyService;\n    this.lookUpService = lookUpService;\n    this.authService = authService;\n    this.dialog = dialog;\n    this.displayedColumns = [\"orderId\", \"customerName\", \"productName\", \"quantity\", \"status\", \"approve\"];\n    this.order = new Order();\n    this.orderList = [];\n    this.isGroupChange = false;\n    this.isClaimChange = false;\n    this.Filter = \"\";\n  }\n  OrderAddDialog() {\n    const dialogRef = this.dialog.open(OrderAddDialogComponent, {\n      width: '500px'\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      this.getOrderList(); // Listesi güncelle\n    });\n  }\n  ngAfterViewInit() {\n    this.getOrderList();\n  }\n  ngOnInit() {\n    this.createOrderAddForm();\n    this.dropdownSettings = environment.getDropDownSetting;\n    this.lookUpService.getGroupLookUp().subscribe(data => {\n      this.groupDropdownList = data;\n    });\n    this.lookUpService.getOperationClaimLookUp().subscribe(data => {\n      this.claimDropdownList = data;\n    });\n  }\n  createOrderAddForm() {\n    this.orderAddForm = this.formBuilder.group({\n      id: [0],\n      customerId: [\"\", Validators.required],\n      productId: [\"\", Validators.required],\n      quantity: [\"\", Validators.required],\n      status: [false]\n    });\n  }\n  getOrderList() {\n    this.orderService.getOrderList().subscribe(data => {\n      this.orderList = data;\n      this.dataSource = new MatTableDataSource(data);\n      this.configDataTable();\n      // Verinin doğru formatta olduğundan emin olun\n      this.dataSource.data.forEach(order => {\n        console.log(\"Order:\", order); // Kullanıcı verilerini kontrol etmek için\n      });\n    }, error => {\n      console.error(\"Error fetching order list:\", error);\n    });\n  }\n  clearFormGroup(group) {\n    group.markAsUntouched();\n    group.reset();\n    Object.keys(group.controls).forEach(key => {\n      group.get(key).setErrors(null);\n      if (key === \"id\") group.get(key).setValue(0);else if (key === \"status\") group.get(key).setValue(true);\n    });\n    console.log(group.controls); // Form kontrollerinin sıfırlanmış hallerini kontrol etmek için\n  }\n  setOrderId(id) {\n    this.id = id;\n  }\n  save() {\n    if (this.orderAddForm.valid) {\n      console.log('Form submitted', this.orderAddForm.value);\n      this.order = Object.assign({}, this.orderAddForm.value);\n      if (this.order.id == 0) this.addOrder();else this.updateOrder();\n    } else {\n      console.log('Form is invalid');\n      console.log(this.orderAddForm.controls); // Kontrol edilecek alanlar\n      for (const control in this.orderAddForm.controls) {\n        if (this.orderAddForm.controls[control].errors) {\n          console.log(`Error in ${control}:`, this.orderAddForm.controls[control].errors);\n        }\n      }\n    }\n  }\n  addOrder() {\n    this.orderService.addOrder(this.order).subscribe(data => {\n      this.getOrderList();\n      this.order = new Order();\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.orderAddForm);\n    }, error => {\n      console.error('Error adding order:', error);\n    });\n  }\n  getOrderById(id) {\n    this.clearFormGroup(this.orderAddForm);\n    this.orderService.getOrderById(id).subscribe(data => {\n      this.order = data;\n      this.orderAddForm.patchValue(data);\n    });\n  }\n  updateOrder() {\n    this.orderService.updateOrder(this.order).subscribe(data => {\n      var index = this.orderList.findIndex(x => x.id == this.order.id);\n      this.orderList[index] = this.order;\n      this.dataSource = new MatTableDataSource(this.orderList);\n      this.configDataTable();\n      this.order = new Order();\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.orderAddForm);\n    });\n  }\n  approveOrder(id) {\n    this.orderService.approveOrder(id).subscribe(() => {\n      this.alertifyService.success('Order approved successfully');\n      this.getOrderList(); // Listesi güncelle\n    }, error => {\n      this.alertifyService.error('Error approving order');\n    });\n  }\n  checkClaim(claim) {\n    return this.authService.claimGuard(claim);\n  }\n  configDataTable() {\n    if (this.dataSource) {\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n    }\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n};\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], OrderComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], OrderComponent.prototype, \"sort\", void 0);\nOrderComponent = __decorate([Component({\n  selector: \"order\",\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatButtonModule, MatPaginatorModule, MatSortModule, MatTableModule, MatCheckboxModule, NgMultiSelectDropDownModule, SweetAlert2Module, MatRippleModule, MatFormFieldModule, MatInputModule, MatSelectModule, MatTooltipModule, TranslateModule, MatDialogModule, MatIconButton, MatSortModule, MatTableModule, MatGridListModule, MatCardModule, MatChipsModule, MatDividerModule, MatIconModule],\n  providers: [SweetAlert2Module.forRoot().providers],\n  templateUrl: \"./order.component.html\",\n  styleUrls: [\"./order.component.css\"]\n}), __metadata(\"design:paramtypes\", [OrderService, FormBuilder, AlertifyService, LookUpService, AuthService, MatDialog])], OrderComponent);\nexport { OrderComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}