{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\nimport { TokenService } from '../components/admin/login/services/token.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../components/admin/login/services/token.service\";\nexport let AuthInterceptorService = /*#__PURE__*/(() => {\n  class AuthInterceptorService {\n    constructor(tokenService) {\n      this.tokenService = tokenService;\n      this.isRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n    intercept(req, next) {\n      req = this.addToken(req);\n      return next.handle(req).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          return this.handle401Error(req, next);\n        } else {\n          return throwError(error);\n        }\n      }));\n    }\n    addToken(req) {\n      var lang = localStorage.getItem(\"lang\") || \"tr-TR\";\n      //TODO: Refactoring needed\n      return req.clone({\n        setHeaders: {\n          'Accept-Language': lang,\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        responseType: req.method == \"DELETE\" ? \"text\" : req.responseType\n      });\n    }\n    handle401Error(req, next) {\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshTokenSubject.next(null);\n        return this.tokenService.refreshToken().pipe(switchMap(token => {\n          console.log(\"Token Yenilendi.\");\n          this.isRefreshing = false;\n          this.refreshTokenSubject.next(token.data.token);\n          return next.handle(this.addToken(req));\n        }));\n      } else {\n        return this.refreshTokenSubject.pipe(filter(token => token != null), take(1), switchMap(jwt => {\n          return next.handle(this.addToken(req));\n        }));\n      }\n    }\n    static #_ = this.ɵfac = function AuthInterceptorService_Factory(t) {\n      return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.TokenService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptorService,\n      factory: AuthInterceptorService.ɵfac\n    });\n  }\n  return AuthInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}