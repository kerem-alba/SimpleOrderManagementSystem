{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewChild } from \"@angular/core\";\nimport { FormBuilder, FormsModule, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { Product } from \"./models/Product\";\nimport { ProductService } from \"./services/product.service\";\nimport { AlertifyService } from \"app/core/services/alertify.service\";\nimport { LookUpService } from \"app/core/services/LookUp.service\";\nimport { environment } from \"environments/environment\";\nimport { MatSort, MatSortModule } from \"@angular/material/sort\";\nimport { MatPaginator, MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatTableDataSource, MatTableModule } from \"@angular/material/table\";\nimport { AuthService } from \"../../admin/login/services/auth.service\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { SweetAlert2Module } from \"@sweetalert2/ngx-sweetalert2\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { CommonModule } from \"@angular/common\";\nlet ProductComponent = class ProductComponent {\n  constructor(productService, formBuilder, alertifyService, lookUpService, authService) {\n    this.productService = productService;\n    this.formBuilder = formBuilder;\n    this.alertifyService = alertifyService;\n    this.lookUpService = lookUpService;\n    this.authService = authService;\n    this.displayedColumns = [\"productId\", \"productName\", \"colorId\", \"status\", \"size\", \"update\"\n    //\"delete\",\n    ];\n    this.product = new Product();\n    this.productList = [];\n    this.isGroupChange = false;\n    this.isClaimChange = false;\n    this.Filter = \"\";\n  }\n  ngAfterViewInit() {\n    this.getProductList();\n  }\n  ngOnInit() {\n    this.createProductAddForm();\n    this.dropdownSettings = environment.getDropDownSetting;\n    this.lookUpService.getGroupLookUp().subscribe(data => {\n      this.groupDropdownList = data;\n    });\n    this.lookUpService.getOperationClaimLookUp().subscribe(data => {\n      this.claimDropdownList = data;\n    });\n  }\n  onItemSelect(comboType) {\n    this.setComboStatus(comboType);\n  }\n  onSelectAll(comboType) {\n    this.setComboStatus(comboType);\n  }\n  onItemDeSelect(comboType) {\n    this.setComboStatus(comboType);\n  }\n  setComboStatus(comboType) {\n    if (comboType == \"Group\") this.isGroupChange = true;else if (comboType == \"Claim\") this.isClaimChange = true;\n  }\n  createProductAddForm() {\n    this.productAddForm = this.formBuilder.group({\n      productId: [0],\n      productName: [\"\", Validators.required],\n      size: [\"\", Validators.required],\n      colorId: [0],\n      status: [true]\n    });\n  }\n  getProductList() {\n    this.productService.getProductList().subscribe(data => {\n      this.productList = data;\n      this.dataSource = new MatTableDataSource(data);\n      this.configDataTable();\n      // Verinin doğru formatta olduğundan emin olun\n      this.dataSource.data.forEach(product => {\n        console.log(\"Product:\", product); // Kullanıcı verilerini kontrol etmek için\n        console.log(\"Type of status:\", typeof product.status); // status alanının türünü kontrol etmek için\n      });\n    }, error => {\n      console.error(\"Error fetching product list:\", error);\n    });\n  }\n  clearFormGroup(group) {\n    group.markAsUntouched();\n    group.reset();\n    Object.keys(group.controls).forEach(key => {\n      group.get(key).setErrors(null);\n      if (key == \"productId\") group.get(key).setValue(0);else if (key == \"status\") group.get(key).setValue(true);\n    });\n  }\n  setProductId(id) {\n    this.productId = id;\n  }\n  save() {\n    if (this.productAddForm.valid) {\n      this.product = Object.assign({}, this.productAddForm.value);\n      if (this.product.productId == 0) this.addProduct();else this.updateProduct();\n    }\n  }\n  addProduct() {\n    this.productService.addProduct(this.product).subscribe(data => {\n      this.getProductList();\n      this.product = new Product();\n      //jQuery(\"#product\").modal(\"hide\");\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.productAddForm);\n    });\n  }\n  getProductById(id) {\n    this.clearFormGroup(this.productAddForm);\n    this.productService.getProductById(id).subscribe(data => {\n      this.product = data;\n      this.productAddForm.patchValue(data);\n    });\n  }\n  updateProduct() {\n    this.productService.updateProduct(this.product).subscribe(data => {\n      var index = this.productList.findIndex(x => x.productId == this.product.productId);\n      this.productList[index] = this.product;\n      this.dataSource = new MatTableDataSource(this.productList);\n      this.configDataTable();\n      this.product = new Product();\n      //jQuery(\"#product\").modal(\"hide\");\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.productAddForm);\n    });\n  }\n  deleteProduct(id) {\n    this.productService.deleteProduct(id).subscribe(data => {\n      this.alertifyService.success(data.toString());\n      var index = this.productList.findIndex(x => x.productId == id);\n      this.productList[index].status = false;\n      this.dataSource = new MatTableDataSource(this.productList);\n      this.configDataTable();\n    });\n  }\n  checkClaim(claim) {\n    return this.authService.claimGuard(claim);\n  }\n  configDataTable() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n};\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], ProductComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], ProductComponent.prototype, \"sort\", void 0);\nProductComponent = __decorate([Component({\n  selector: \"product\",\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatButtonModule, MatPaginatorModule, MatSortModule, MatTableModule],\n  providers: [SweetAlert2Module.forRoot().providers],\n  templateUrl: \"./product.component.html\",\n  styleUrls: [\"./product.component.css\"]\n}), __metadata(\"design:paramtypes\", [ProductService, FormBuilder, AlertifyService, LookUpService, AuthService])], ProductComponent);\nexport { ProductComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}